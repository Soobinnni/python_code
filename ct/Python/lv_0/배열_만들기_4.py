# 문제 설명
# 정수 배열 arr가 주어집니다. arr를 이용해 새로운 배열 stk를 만드려고 합니다.

# 변수 i를 만들어 초기값을 0으로 설정한 후 i가 arr의 길이보다 작으면 다음 작업을 반복합니다.

# 만약 stk가 빈 배열이라면 arr[i]를 stk에 추가하고 i에 1을 더합니다.
# stk에 원소가 있고, stk의 마지막 원소가 arr[i]보다 작으면 arr[i]를 stk의 뒤에 추가하고 i에 1을 더합니다.
# stk에 원소가 있는데 stk의 마지막 원소가 arr[i]보다 크거나 같으면 stk의 마지막 원소를 stk에서 제거합니다.
# 위 작업을 마친 후 만들어진 stk를 return 하는 solution 함수를 완성해 주세요.

# 제한사항
# 1 ≤ arr의 길이 ≤ 100,000
# 1 ≤ arr의 원소 ≤ 100,000
# 입출력 예
# arr	result
# [1, 4, 2, 5, 3]	[1, 2, 3]
# 입출력 예 설명
# 입출력 예 #1

# 각 작업을 마친 후에 배열의 변화를 나타내면 다음 표와 같습니다.
# i	arr[i]	stk
# 0	1	[]
# 1	4	[1]
# 2	2	[1, 4]
# 2	2	[1]
# 3	5	[1, 2]
# 4	3	[1, 2, 5]
# 4	3	[1, 2]
# -	-	[1, 2, 3]
# 따라서 [1, 2, 3]을 return 합니다.




#------------------------------------------------------
# 성능 차이가 발생하는 이유는 주로 코드의 구조와 실행 패턴에 有

# 첫 번째 함수 (배열_만들기_4):
# while 루프를 사용하면서, 일반적으로 while 루프가 조건을 평가하고 반복을 진행하는 동안 인덱스를 직접 제어하기 때문에 성능에 영향을 미칠 수 있습니다.
# 조건문(if)과 인덱스 증가(i += 1)를 같이 사용하는데, 조건문이 거의 항상 참이어서 인덱스가 증가하는 패턴이 있습니다. 이는 불필요한 조건 확인이 발생할 수 있습니다.

# 두 번째 함수 (다른_사람_배열_만들기_4):
# for 루프를 사용하면서, while 루프가 아닌 단순한 반복 구조를 가지고 있습니다.
# for 루프에서는 인덱스 증가를 명시적으로 처리하므로 코드의 직관성이 높아집니다.
# while 루프를 사용하지 않고 바로 for 루프로 진입하여 불필요한 조건 확인이 줄어듭니다.
#------------------------------------------------------


def 배열_만들기_4(arr):
	# 테스트 1 〉	통과 (12.45ms, 10.5MB)
	# 테스트 2 〉	통과 (10.72ms, 11.1MB)
	# 테스트 3 〉	통과 (71.99ms, 13.6MB)
	# 테스트 4 〉	통과 (46.01ms, 13.3MB)
	# 테스트 5 〉	통과 (43.08ms, 12.3MB)
	# 테스트 6 〉	통과 (10.04ms, 10.9MB)
	# 테스트 7 〉	통과 (35.63ms, 12.3MB)
	# 테스트 8 〉	통과 (43.71ms, 12.8MB)
	# 테스트 9 〉	통과 (44.07ms, 14MB)
	# 테스트 10 〉	통과 (77.97ms, 13.9MB)
	# 테스트 11 〉	통과 (4.35ms, 10.4MB)
    i = 0
    stk = []
    while i < len(arr):
        if stk and stk[-1] >= arr[i]:
            stk.pop()
        else:
            stk.append(arr[i])
            i += 1
        
    return stk

def 다른_사람_배열_만들기_4(arr):
	# 테스트 1 〉	통과 (4.17ms, 10.5MB)
	# 테스트 2 〉	통과 (6.76ms, 11MB)
	# 테스트 3 〉	통과 (23.39ms, 13.6MB)
	# 테스트 4 〉	통과 (20.30ms, 13.4MB)
	# 테스트 5 〉	통과 (13.45ms, 12.5MB)
	# 테스트 6 〉	통과 (5.16ms, 10.7MB)
	# 테스트 7 〉	통과 (14.15ms, 12.2MB)
	# 테스트 8 〉	통과 (27.42ms, 12.8MB)
	# 테스트 9 〉	통과 (24.68ms, 13.9MB)
	# 테스트 10 〉	통과 (24.27ms, 13.8MB)
	# 테스트 11 〉	통과 (2.57ms, 10.4MB)
    stk = []
    for i in range(len(arr)):
        while stk and stk[-1] >= arr[i]:
            stk.pop()
        stk.append(arr[i])
    return stk